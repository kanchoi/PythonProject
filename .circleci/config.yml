version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.1.0
  aws-ecr: circleci/aws-ecr@9.6.0

executors:
  python-executor:
    docker:
      - image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/myapp:${CIRCLE_SHA1}
        aws_auth:
          oidc_role_arn: arn:aws:iam::$AWS_IAM:role/CIRCLE_OPENID
      - image: cimg/postgres:14.0  # sidecar DB
        environment:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb

jobs:
  build:
    docker:
      - image: cimg/base:stable
      - image: cimg/python:3.10-browsers
    steps:
      - checkout
      - setup_remote_docker:
            docker_layer_caching: true

      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup:
                role_arn: arn:aws:iam::$AWS_IAM:role/CIRCLE_OPENID
                profile_name: default
          repo: myapp
          tag: ${CIRCLE_SHA1}
          region: $AWS_REGION

  test:
    executor: python-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-pip-{{ checksum "requirements.txt" }}
            - v1-pip-
      - run:
          name: Install dependencies
          command: pip install -r requirements.txt
      - save_cache:
          paths:
            - ~/.cache/pip
          key: v1-pip-{{ checksum "requirements.txt" }}
      - run:
          name: Install Postgres client
          command: |
            apt-get update
            apt-get install -y postgresql-client
      - run:
          name: Wait for Postgres
          command: |
            echo "Waiting for Postgres..."
            for i in {1..30}; do
              pg_isready -h localhost -p 5432 -U testuser && echo "Postgres is up" && exit 0
              sleep 2
            done
            echo "Postgres did not start in time" && exit 1
      - run:
          name: Run tests
          command: pytest --junitxml=test-results/results.xml
      - store_test_results:
          path: test-results

#      - aws-cli/setup:
#          role_arn: arn:aws:iam::$AWS_IAM:role/CIRCLE_OPENID
#          profile_name: default
#
#      - run:
#          name: Publish an Artifact to S3
#          command: |
#            if [ "${CIRCLE_BRANCH}" == "main" ]; then
#              aws s3 sync test-results/ s3://circleci-demo-personal
#            else
#              echo "Skipping artifacts Deployment to S3"
#            fi

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
#      - checkout
#      - setup_remote_docker
      - aws-cli/setup:
          role_arn: arn:aws:iam::$AWS_IAM:role/CIRCLE_OPENID
          profile_name: default

      - run:
          name: Publish an Artifact to S3
          command: |
            aws s3 sync test-results/ s3://circleci-demo-personal



workflows:
  version: 2
  ci_pipeline:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: main
